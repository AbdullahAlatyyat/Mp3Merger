<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>